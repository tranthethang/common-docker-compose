services:
    traefik:
        image: "traefik:v3.0"
        container_name: "traefik"
        profiles: ["proxy", "traefik", "all"]
        command:
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--serversTransport.insecureSkipVerify=true"
        ports:
            - "80:80"
            - "443:443"
            - "8080:8080"
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
        networks:
            - dev_tools

    minio:
        container_name: dev_minio
        image: bitnami/minio:latest
        profiles: ["storage", "minio", "all"]
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.minio.rule=Host(`${MINIO_HOST:-minio.localhost}`)"
            - "traefik.http.services.minio.loadbalancer.server.port=9000"
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-password102}
            - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS:-my-bucket}
            - MINIO_BROWSER=${MINIO_BROWSER:-on} 
        volumes:
            - minio_data:/bitnami/minio/data
        restart: '${RESTART_POLICY:-always}'
        networks:
            - dev_tools
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 20s

    portainer:
        image: portainer/portainer-ce:lts
        container_name: dev_portainer
        profiles: ["management", "portainer", "all"]
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.portainer-http.rule=Host(`${PORTAINER_HOST:-portainer.localhost}`)"
            - "traefik.http.routers.portainer-http.entrypoints=web"
            - "traefik.http.routers.portainer-http.middlewares=portainer-https-redirect"
            - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.portainer-http.service=portainer"
            - "traefik.http.routers.portainer-https.rule=Host(`${PORTAINER_HOST:-portainer.localhost}`)"
            - "traefik.http.routers.portainer-https.entrypoints=websecure"
            - "traefik.http.routers.portainer-https.tls=true"
            - "traefik.http.routers.portainer-https.service=portainer"
            - "traefik.http.services.portainer.loadbalancer.server.port=9443"
            - "traefik.http.services.portainer.loadbalancer.server.scheme=https"
        volumes:
            - portainer_data:/data
            - /var/run/docker.sock:/var/run/docker.sock
        restart: '${RESTART_POLICY:-always}'
        networks:
            - dev_tools
            
    postgres:
        container_name: dev_postgres
        image: pgvector/pgvector:pg17
        profiles: ["database", "postgres", "git", "ci", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            POSTGRES_USER: '${POSTGRES_USER:-postgres}'
            POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-changeme}'
            POSTGRES_DB: '${POSTGRES_DB:-sonarqube}'
        ports:
            - '${POSTGRES_PORT:-5432}:5432'
        networks:
            - dev_tools
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    adminer:
        container_name: dev_adminer
        image: adminer:5
        profiles: ["database", "adminer", "all"]
        restart: '${RESTART_POLICY:-always}'
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.adminer.rule=Host(`${ADMINER_HOST:-adminer.localhost}`)"
            - "traefik.http.services.adminer.loadbalancer.server.port=8080"
        networks:
            - dev_tools
        depends_on:
            postgres:
                condition: service_healthy
            mysql8:
                condition: service_healthy
        volumes:
            - ./adminer.css:/var/www/html/adminer.css:ro

    mailpit:
        container_name: dev_mailpit
        image: axllent/mailpit:latest
        profiles: ["mail", "mailpit", "all"]
        restart: '${RESTART_POLICY:-always}'
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.mailpit.rule=Host(`${MAILPIT_HOST:-mailpit.localhost}`)"
            - "traefik.http.services.mailpit.loadbalancer.server.port=8025"
        ports:
            - '${MAILPIT_SMTP_PORT:-1025}:1025'
        networks:
            - dev_tools

    mysql8:
        container_name: dev_mysql8
        image: 'mysql:8.0'
        profiles: ["database", "mysql", "all"]
        restart: '${RESTART_POLICY:-always}'
        command: mysqld --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
        environment:
            MYSQL_DATABASE: '${MYSQL_DATABASE:-cloud}'
            MYSQL_USER: '${MYSQL_USER:-uid}'
            MYSQL_PASSWORD: '${MYSQL_PASSWORD:-pwd}'
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD:-secret}'
            TZ: '${TZ:-Asia/Ho_Chi_Minh}'
        ports:
            - '${MYSQL_PORT:-3306}:3306'
        networks:
            - dev_tools
        volumes:
            - mysql_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$${MYSQL_ROOT_PASSWORD}"]
            interval: 10s
            timeout: 5s
            retries: 5

    memcached:
        container_name: dev_memcached
        image: memcached:1.6-alpine
        profiles: ["cache", "memcached", "all"]
        restart: '${RESTART_POLICY:-always}'
        ports:
            - '${MEMCACHED_PORT:-11211}:11211'
        networks:
            - dev_tools

    mongodb:
        container_name: dev_mongodb
        image: 'mongo:8.0'
        profiles: ["database", "mongodb", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            MONGO_INITDB_ROOT_USERNAME: '${MONGO_ROOT_USER:-root}'
            MONGO_INITDB_ROOT_PASSWORD: '${MONGO_ROOT_PASSWORD:-example}'
        ports:
            - '${MONGO_PORT:-27017}:27017'
        networks:
            - dev_tools
        volumes:
            - mongodb_data:/data/db
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
            interval: 10s
            timeout: 5s
            retries: 5

    rabbitmq:
        container_name: dev_rabbitmq
        image: 'rabbitmq:3.13-management-alpine'
        profiles: ["messaging", "rabbitmq", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            RABBITMQ_DEFAULT_USER: '${RABBITMQ_USER:-guest}'
            RABBITMQ_DEFAULT_PASS: '${RABBITMQ_PASSWORD:-guest}'
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.rabbitmq.rule=Host(`${RABBITMQ_HOST:-rabbitmq.localhost}`)"
            - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
        ports:
            - '${RABBITMQ_PORT:-5672}:5672'
        networks:
            - dev_tools
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "check_running"]
            interval: 10s
            timeout: 5s
            retries: 5

    redis:
        container_name: dev_redis
        image: 'redis:7-alpine'
        profiles: ["cache", "redis", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD:-}
        command: >
            --requirepass ${REDIS_PASSWORD:-changeme}
        ports:
            - '${REDIS_PORT:-6379}:6379'
        networks:
            - dev_tools
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5

    redisinsight:
        container_name: dev_redisinsight
        image: 'redis/redisinsight:latest'
        profiles: ["cache", "redisinsight", "all"]
        restart: '${RESTART_POLICY:-always}'
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.redisinsight.rule=Host(`${REDISINSIGHT_HOST:-redisinsight.localhost}`)"
            - "traefik.http.services.redisinsight.loadbalancer.server.port=5540"
        networks:
            - dev_tools
        volumes:
            - redisinsight_data:/data
        depends_on:
            redis:
                condition: service_healthy

    ollama:
        container_name: dev_ollama
        image: ollama/ollama:latest
        profiles: ["ai", "ollama", "all"]
        restart: '${RESTART_POLICY:-always}'
        ports:
            - '${OLLAMA_PORT:-11434}:11434'
        networks:
            - dev_tools
        volumes:
            - ollama_data:/root/.ollama
        healthcheck:
            test: ["CMD", "ollama", "list"]
            interval: 10s
            timeout: 5s
            retries: 5
        entrypoint: ["/bin/sh", "-lc", "ollama serve & until ollama list >/dev/null 2>&1; do sleep 1; done; ollama pull ${OLLAMA_MODEL:-gemma:7b}; wait"]

    anythingllm:
        container_name: dev_anythingllm
        image: mintplexlabs/anythingllm:pg
        profiles: ["ai", "anythingllm", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            - STORAGE_DIR=${ANYTHINGLLM_STORAGE_DIR:-/app/server/storage}
            - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
            - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme}@postgres:${POSTGRES_PORT:-5432}/${ANYTHINGLLM_DB_NAME:-anythingllm}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.anythingllm.rule=Host(`${ANYTHINGLLM_HOST:-anythingllm.localhost}`)"
            - "traefik.http.services.anythingllm.loadbalancer.server.port=3001"
        networks:
            - dev_tools
        volumes:
            - anythingllm_data:/app/server/storage
        depends_on:
            ollama:
                condition: service_healthy

    sonarqube:
        container_name: dev_sonarqube
        image: sonarqube:lts-community
        profiles: ["analysis", "sonarqube", "all"]
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            SONAR_JDBC_URL: jdbc:postgresql://postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-sonarqube}
            SONAR_JDBC_USERNAME: '${POSTGRES_USER:-postgres}'
            SONAR_JDBC_PASSWORD: '${POSTGRES_PASSWORD:-changeme}'
        restart: '${RESTART_POLICY:-always}'
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.sonarqube.rule=Host(`${SONARQUBE_HOST:-sonarqube.localhost}`)"
            - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"
        networks:
            - dev_tools
        volumes:
            - sonarqube_conf:/opt/sonarqube/conf
            - sonarqube_data:/opt/sonarqube/data
            - sonarqube_extensions:/opt/sonarqube/extensions
            - sonarqube_logs:/opt/sonarqube/logs
            - sonarqube_temp:/opt/sonarqube/temp
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s

    gitea:
        image: gitea/gitea:latest
        container_name: gitea
        profiles: ["git", "gitea","all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            - USER_UID=1000
            - USER_GID=1000
            - GITEA__database__DB_TYPE=postgres
            - GITEA__database__HOST=postgres:${POSTGRES_PORT:-5432}
            - GITEA__database__NAME=${GITEA_DB_NAME:-gitea}
            - GITEA__database__USER=${POSTGRES_USER:-postgres}
            - GITEA__database__PASSWD=${POSTGRES_PASSWORD:-changeme}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.gitea.rule=Host(`${GITEA_HOST:-gitea.localhost}`)"
            - "traefik.http.services.gitea.loadbalancer.server.port=3000"
        ports:
            - "${GITEA_SSH_PORT:-2222}:22"
        volumes:
            - gitea_data:/data
        networks:
            - dev_tools
        depends_on:
            postgres:
                condition: service_healthy

    concourse:
        image: concourse/concourse
        restart: '${RESTART_POLICY:-always}'
        command: quickstart
        privileged: true
        profiles: ["concourse", "ci","all"]
        depends_on:
            postgres:
                condition: service_healthy
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.concourse.rule=Host(`${CONCOURSE_HOST:-concourse.localhost}`)"
            - "traefik.http.services.concourse.loadbalancer.server.port=8080"
        environment:
            CONCOURSE_POSTGRES_HOST: '${POSTGRES_HOST:-postgres}'
            CONCOURSE_POSTGRES_USER: '${POSTGRES_USER:-postgres}'
            CONCOURSE_POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-changeme}'
            CONCOURSE_POSTGRES_DATABASE: '${CONCOURSE_DB_NAME:-concourse}'
            CONCOURSE_EXTERNAL_URL: 'http://${CONCOURSE_HOST:-concourse.localhost}'
            CONCOURSE_ADD_LOCAL_USER: '${CONCOURSE_ADD_LOCAL_USER:-admin:admin}'
            CONCOURSE_MAIN_TEAM_LOCAL_USER: '${CONCOURSE_MAIN_TEAM_LOCAL_USER:-admin}'
            CONCOURSE_WORKER_GARDEN_NETWORK: '${CONCOURSE_WORKER_GARDEN_NETWORK:-dev_tools}'
        networks:
            - dev_tools

networks:
    dev_tools:
        name: dev_tools
        driver: bridge

volumes:
    postgres_data:
    mysql_data:
    mongodb_data:
    rabbitmq_data:
    redis_data:
    sonarqube_conf:
    sonarqube_data:
    sonarqube_extensions:
    sonarqube_logs:
    sonarqube_temp:
    portainer_data:
    minio_data:
    redisinsight_data:
    ollama_data:
    anythingllm_data:
    gitea_data: