services:

    minio:
        container_name: dev_minio
        image: bitnami/minio:latest
        profiles: ["storage", "minio", "all"]
        ports:
            - '${MINIO_API_PORT:-9009}:9000'
            - '${MINIO_CONSOLE_PORT:-9001}:9001'
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-password102}
            - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS:-my-bucket}
            - MINIO_BROWSER=${MINIO_BROWSER:-on} 
        volumes:
            - minio_data:/bitnami/minio/data
        restart: '${RESTART_POLICY:-always}'
        networks:
            - dev_tools
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 20s

    portainer:
        image: portainer/portainer-ce:latest
        container_name: dev_portainer
        profiles: ["management", "portainer", "all"]
        ports:
            - '${PORTAINER_PORT:-9443}:9443'
        volumes:
            - portainer_data:/data
            - /var/run/docker.sock:/var/run/docker.sock
        restart: '${RESTART_POLICY:-always}'
        networks:
            - dev_tools
            
    postgres:
        container_name: dev_postgres
        image: pgvector/pgvector:pg15
        profiles: ["database", "postgres", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            POSTGRES_USER: '${POSTGRES_USER:-postgres}'
            POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-changeme}'
            POSTGRES_DB: '${POSTGRES_DB:-sonarqube}'
        ports:
            - '${POSTGRES_PORT:-5432}:5432'
        networks:
            - dev_tools
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    adminer:
        container_name: dev_adminer
        image: adminer:4.8.1
        profiles: ["database", "adminer", "all"]
        restart: '${RESTART_POLICY:-always}'
        ports:
            - '${ADMINER_PORT:-8048}:8080'
        networks:
            - dev_tools
        depends_on:
            postgres:
                condition: service_healthy
            mysql8:
                condition: service_healthy

    mailpit:
        container_name: dev_mailpit
        image: axllent/mailpit:latest
        profiles: ["mail", "mailpit", "all"]
        restart: '${RESTART_POLICY:-always}'
        ports:
            - '${MAILPIT_WEB_PORT:-8025}:8025'
            - '${MAILPIT_SMTP_PORT:-1025}:1025'
        networks:
            - dev_tools

    mysql8:
        container_name: dev_mysql8
        image: 'mysql:8.0'
        profiles: ["database", "mysql", "all"]
        restart: '${RESTART_POLICY:-always}'
        command: mysqld --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
        environment:
            MYSQL_DATABASE: '${MYSQL_DATABASE:-cloud}'
            MYSQL_USER: '${MYSQL_USER:-uid}'
            MYSQL_PASSWORD: '${MYSQL_PASSWORD:-pwd}'
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD:-secret}'
            TZ: '${TZ:-Asia/Ho_Chi_Minh}'
        ports:
            - '${MYSQL_PORT:-3306}:3306'
        networks:
            - dev_tools
        volumes:
            - mysql_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$${MYSQL_ROOT_PASSWORD}"]
            interval: 10s
            timeout: 5s
            retries: 5

    memcached:
        container_name: dev_memcached
        image: memcached:1.6
        profiles: ["cache", "memcached", "all"]
        restart: '${RESTART_POLICY:-always}'
        ports:
            - '${MEMCACHED_PORT:-11211}:11211'
        networks:
            - dev_tools

    mongodb:
        container_name: dev_mongodb
        image: 'mongo:6.0'
        profiles: ["database", "mongodb", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            MONGO_INITDB_ROOT_USERNAME: '${MONGO_ROOT_USER:-root}'
            MONGO_INITDB_ROOT_PASSWORD: '${MONGO_ROOT_PASSWORD:-example}'
        ports:
            - '${MONGO_PORT:-27017}:27017'
        networks:
            - dev_tools
        volumes:
            - mongodb_data:/data/db
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
            interval: 10s
            timeout: 5s
            retries: 5

    rabbitmq:
        container_name: dev_rabbitmq
        image: 'rabbitmq:3.11-management-alpine'
        profiles: ["messaging", "rabbitmq", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            RABBITMQ_DEFAULT_USER: '${RABBITMQ_USER:-guest}'
            RABBITMQ_DEFAULT_PASS: '${RABBITMQ_PASSWORD:-guest}'
        ports:
            - '${RABBITMQ_PORT:-5672}:5672'
            - '${RABBITMQ_WEB_PORT:-15672}:15672'
        networks:
            - dev_tools
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "check_running"]
            interval: 10s
            timeout: 5s
            retries: 5

    redis:
        container_name: dev_redis
        image: 'redis:7.0-alpine'
        profiles: ["cache", "redis", "all"]
        restart: '${RESTART_POLICY:-always}'
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD:-}
        command: >
            --requirepass ${REDIS_PASSWORD:-changeme}
        ports:
            - '${REDIS_PORT:-6379}:6379'
        networks:
            - dev_tools
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5

    redis-insight:
        container_name: dev_redis-insight
        image: redis/redisinsight:latest
        profiles: ["cache", "redis", "all"]
        restart: '${RESTART_POLICY:-always}'
        ports:
            - '${REDIS_INSIGHT_PORT:-8001}:8001'
        networks:
            - dev_tools
        volumes:
            - redis-insight_data:/data
        depends_on:
            redis:
                condition: service_healthy

    sonarqube:
        container_name: dev_sonarqube
        image: sonarqube:lts-community
        profiles: ["analysis", "sonarqube", "all"]
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            SONAR_JDBC_URL: jdbc:postgresql://postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-sonarqube}
            SONAR_JDBC_USERNAME: '${POSTGRES_USER:-postgres}'
            SONAR_JDBC_PASSWORD: '${POSTGRES_PASSWORD:-changeme}'
        restart: '${RESTART_POLICY:-always}'
        ports:
            - '${SONARQUBE_PORT:-9090}:9000'
        networks:
            - dev_tools
        volumes:
            - sonarqube_conf:/opt/sonarqube/conf
            - sonarqube_data:/opt/sonarqube/data
            - sonarqube_extensions:/opt/sonarqube/extensions
            - sonarqube_logs:/opt/sonarqube/logs
            - sonarqube_temp:/opt/sonarqube/temp
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s

networks:
    dev_tools:
        name: dev_tools
        driver: bridge

volumes:
    postgres_data:
    mysql_data:
    mongodb_data:
    rabbitmq_data:
    redis_data:
    redis-insight_data:
    sonarqube_conf:
    sonarqube_data:
    sonarqube_extensions:
    sonarqube_logs:
    sonarqube_temp:
    portainer_data:
    minio_data:
